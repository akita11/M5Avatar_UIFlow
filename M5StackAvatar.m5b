{"category":"M5StackAvatar","color":"#06e5c0","blocks":["__M5StackAvatar_start","__M5StackAvatar_speak","__M5StackAvatar_exclamation","__M5StackAvatar_pale","__M5StackAvatar_smile","__M5StackAvatar_sleep","__M5StackAvatar_color"],"jscode":"// Block __M5StackAvatar_start\nvar __M5StackAvatar_start_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Avatar_start\"\n        }\n    ],\n    \"colour\": \"#06e5c0\"\n};\n\nwindow['Blockly'].Blocks['__M5StackAvatar_start'] = {\n    init: function() {\n        this.jsonInit(__M5StackAvatar_start_json);\n    }\n};\n\nwindow['Blockly'].Python['__M5StackAvatar_start'] = function(block) {\n        return `# M5StackAvatar BLOCK\n# Based on M5StackAvatarPython : https://github.com/h-akanuma/M5StackAvatarPython\n# v1.0 (220801)\n# v1.1 (241205)\n# v1.2 (241227)\n# Copyright (c) 2022 @akita11, Released under the MIT license\n\nimport random\nface_color = 0x000000\n\nscreen.set_screen_bg_color(face_color)\nscreen.clean_screen()\nlcd.fill(face_color)\n\nM5Avatar_fw, M5Avatar_fh = lcd.fontSize()\nM5Avatar_ww, M5Avatar_wh = lcd.screensize()\nM5Avatar_eye_x = 90\nM5Avatar_eye_y = 93\nM5Avatar_eye_r = 8\nM5Avatar_eye_close_x= 82\nM5Avatar_eye_close_width  = 16\nM5Avatar_eye_close_height = 4\nM5Avatar_blink_term_ms    = 500\nM5Avatar_mouth_x = 115\nM5Avatar_mouth_y = 148\nM5Avatar_mouth_width = 90\nM5Avatar_mouth_height = 4\nM5Avatar_mouth_close= True\nM5Avatar_mouth_close_height = 20\nM5Avatar_exclamation_x = 280\nM5Avatar_exclamation_y = 20\nM5Avatar_exclamation_width  = 10\nM5Avatar_exclamation_height = 30\nM5Avatar_exclamation_space  = 8\ntm_blink = 0\nst_blink = 0\ntm_mouth = 0\nst_mouth = 0\ntm_speak = 0\ntimerAvatar_period = 100\ntm_blink_open = random.randint(2, 6) * 1000\ntm_mouth_period = 500\nfFaceStatus = 0\nM5Avatar_spaces = ' '\nwhile lcd.textWidth(M5Avatar_spaces) < M5Avatar_ww:\n  M5Avatar_spaces += ' '\n\n@timerSch.event('timerAvatar')\ndef ttimerAvatar():\n  global tm_speak\n  _blink()\n  _mouth()\n  tm_speak = tm_speak + timerAvatar_period\n  pass\n\ndef _blink():\n    global tm_blink, st_blink, tm_blink_open\n    tm_blink = tm_blink + timerAvatar_period\n    if st_blink == 0:\n      _eye_close()\n      if tm_blink >= M5Avatar_blink_term_ms:\n        st_blink = 1\n        tm_blink = 0\n    else:\n      _eye_open()\n      if tm_blink >= tm_blink_open:\n        tm_blink_open = random.randint(2, 6) * 1000\n        st_blink = 0\n        tm_blink = 0\n\ndef _eye_close():\n    global face_color\n    lcd.rect(M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_ww - M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_eye_close_x, M5Avatar_eye_y, M5Avatar_eye_close_width, M5Avatar_eye_close_height, lcd.WHITE, lcd.WHITE)\n    lcd.rect(\n        M5Avatar_ww - M5Avatar_eye_close_x - M5Avatar_eye_close_width,\n        M5Avatar_eye_y, M5Avatar_eye_close_width,\n        M5Avatar_eye_close_height,\n        lcd.WHITE,\n        lcd.WHITE\n    )\n\ndef _eye_open():\n    global face_color\n    global fFaceStatus\n    lcd.rect(M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_ww - M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    if fFaceStatus == 0:\n        lcd.circle(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r, lcd.WHITE, lcd.WHITE)\n        lcd.circle(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r, lcd.WHITE, lcd.WHITE)\n    elif fFaceStatus == 1:\n        lcd.arc(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, -90, 90, lcd.WHITE, lcd.WHITE)\n        lcd.arc(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, -90, 90, lcd.WHITE, lcd.WHITE)\n    else:\n        lcd.arc(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, 90, 270, lcd.WHITE, lcd.WHITE)\n        lcd.arc(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, 90, 270, lcd.WHITE, lcd.WHITE)\n   \ndef _mouth():\n  global tm_mouth\n  global face_color\n  tm_mouth = tm_mouth + timerAvatar_period\n  if tm_mouth >= tm_mouth_period:\n    tm_mouth = 0\n    lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, lcd.WHITE, lcd.WHITE)\n\ndef _lipsync():\n  if M5Avatar_mouth_close:\n    _lip_open()\n  else:\n    _lip_close()\n\ndef _lip_close():\n  global M5Avatar_mouth_close\n  global face_color\n  lcd.rect(\n    M5Avatar_mouth_x,\n    M5Avatar_mouth_y - (M5Avatar_mouth_close_height // 2),\n    M5Avatar_mouth_width,\n    M5Avatar_mouth_height + M5Avatar_mouth_close_height, \n    face_color,\n    face_color\n  )\n  lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, lcd.WHITE, lcd.WHITE)\n  M5Avatar_mouth_close = True\n\ndef _lip_open():\n  global M5Avatar_mouth_close\n  global face_color\n  lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, face_color, face_color)\n  lcd.rect(\n    M5Avatar_mouth_x,\n    M5Avatar_mouth_y - (M5Avatar_mouth_close_height // 2),\n    M5Avatar_mouth_width,\n    M5Avatar_mouth_height + M5Avatar_mouth_close_height,\n    lcd.WHITE,\n    lcd.WHITE\n  )\n  M5Avatar_mouth_close = False\n\ndef _speak(_text):\n  text = _text\n  lcd.setColor(lcd.BLACK, lcd.WHITE)\n  lcd.arc((M5Avatar_eye_x + M5Avatar_mouth_x) // 2, (M5Avatar_wh - M5Avatar_fh) - 5, 25, 25, 270, 360, lcd.WHITE, lcd.WHITE)\n  lcd.rect(0, (M5Avatar_wh - M5Avatar_fh) - 5, M5Avatar_ww + 5, M5Avatar_fh + 5, lcd.WHITE, lcd.WHITE)\n  lcd.textClear(0, (M5Avatar_wh - M5Avatar_fh) - 1, M5Avatar_spaces, lcd.WHITE)\n  lcd.print(text, 0, lcd.BOTTOM, lcd.BLACK)\n  _lipsync()\n  tm_speak = 0\n  while tm_speak < 200:\n    tm_speak = tm_speak + timerAvatar_period\n    wait_ms(100)\n    pass\n  tm_speak = 0\n  while lcd.textWidth(text) > 0:\n    text = text[1:]\n    lcd.textClear(0, (M5Avatar_wh - M5Avatar_fh) - 1, M5Avatar_spaces, lcd.WHITE)\n    lcd.print(text, 0, lcd.BOTTOM, lcd.BLACK)\n    _lipsync()\n    while tm_speak < 200:\n      tm_speak = tm_speak + timerAvatar_period\n      wait_ms(100)\n      pass\n    tm_speak = 0\n  lcd.rect(0, (M5Avatar_wh - M5Avatar_fh) - 5, M5Avatar_ww, M5Avatar_fh + 5, face_color, face_color)\n  lcd.arc((M5Avatar_eye_x + M5Avatar_mouth_x) // 2, (M5Avatar_wh - M5Avatar_fh) - 5, 25, 25, 270, 360, face_color, face_color)\n  _lip_close()\n\ndef _exclamation_color(color):\n  lcd.rect(M5Avatar_exclamation_x, M5Avatar_exclamation_y, M5Avatar_exclamation_width, M5Avatar_exclamation_height, color, color)\n  lcd.rect(\n    M5Avatar_exclamation_x, \n    M5Avatar_exclamation_y + M5Avatar_exclamation_height + M5Avatar_exclamation_space,\n    M5Avatar_exclamation_width,\n    M5Avatar_exclamation_width,\n    color,\n    color\n  )\n\ndef _pale_color(color):\n  lcd.rect(200, 0, 5, 40, color, color)\n  lcd.rect(220, 0, 5, 45, color, color)\n  lcd.rect(240, 0, 5, 50, color, color)\n  lcd.rect(260, 0, 5, 55, color, color)\n  lcd.rect(40, 100, 5, 40, color, color)\n  lcd.rect(60, 103, 5, 35, color, color)\n  lcd.rect(80, 106, 5, 30, color, color)\n  lcd.rect(100, 109, 5, 25, color, color)\n\ntimerSch.setTimer('timerAvatar', timerAvatar_period, 0x00)\ntimerSch.run('timerAvatar', timerAvatar_period, 0x00)\ntm_blink_open = random.randint(2, 6) * 1000\n` + \"\\n\";\n};\n\n// Block __M5StackAvatar_speak\nvar __M5StackAvatar_speak_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Avatar_Speak\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Text\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Text\"\n        }\n    ],\n    \"colour\": \"#06e5c0\"\n};\n\nwindow['Blockly'].Blocks['__M5StackAvatar_speak'] = {\n    init: function() {\n        this.jsonInit(__M5StackAvatar_speak_json);\n    }\n};\n\nwindow['Blockly'].Python['__M5StackAvatar_speak'] = function(block) {\n    var Text = Blockly.Python.valueToCode(block, 'Text', Blockly.Python.ORDER_NONE);\n    return `_speak(${Text})\n` + \"\\n\";\n};\n\n// Block __M5StackAvatar_exclamation\nvar __M5StackAvatar_exclamation_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Avatar_Exclamation\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Mode\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Mode\"\n        }\n    ],\n    \"colour\": \"#06e5c0\"\n};\n\nwindow['Blockly'].Blocks['__M5StackAvatar_exclamation'] = {\n    init: function() {\n        this.jsonInit(__M5StackAvatar_exclamation_json);\n    }\n};\n\nwindow['Blockly'].Python['__M5StackAvatar_exclamation'] = function(block) {\n    var Mode = Blockly.Python.valueToCode(block, 'Mode', Blockly.Python.ORDER_NONE);\n    return `global face_color\nif ${Mode} == 1:\n  _exclamation_color(lcd.RED)\nelse:\n  _exclamation_color(face_color)\n` + \"\\n\";\n};\n\n// Block __M5StackAvatar_pale\nvar __M5StackAvatar_pale_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Avatar_Pale\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Mode\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Mode\"\n        }\n    ],\n    \"colour\": \"#06e5c0\"\n};\n\nwindow['Blockly'].Blocks['__M5StackAvatar_pale'] = {\n    init: function() {\n        this.jsonInit(__M5StackAvatar_pale_json);\n    }\n};\n\nwindow['Blockly'].Python['__M5StackAvatar_pale'] = function(block) {\n    var Mode = Blockly.Python.valueToCode(block, 'Mode', Blockly.Python.ORDER_NONE);\n    return `global face_color\nif ${Mode} == 1:\n  _pale_color(lcd.BLUE)\nelse:\n  _pale_color(face_color)\n` + \"\\n\";\n};\n\n// Block __M5StackAvatar_smile\nvar __M5StackAvatar_smile_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Avatar_Smile\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Mode\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Mode\"\n        }\n    ],\n    \"colour\": \"#06e5c0\"\n};\n\nwindow['Blockly'].Blocks['__M5StackAvatar_smile'] = {\n    init: function() {\n        this.jsonInit(__M5StackAvatar_smile_json);\n    }\n};\n\nwindow['Blockly'].Python['__M5StackAvatar_smile'] = function(block) {\n    var Mode = Blockly.Python.valueToCode(block, 'Mode', Blockly.Python.ORDER_NONE);\n    return `global fFaceStatus\nif ${Mode} == 1:\n  fFaceStatus = 1\nelse:\n  fFaceStatus = 0\n` + \"\\n\";\n};\n\n// Block __M5StackAvatar_sleep\nvar __M5StackAvatar_sleep_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Avatar_Sleep\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Mode\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Mode\"\n        }\n    ],\n    \"colour\": \"#06e5c0\"\n};\n\nwindow['Blockly'].Blocks['__M5StackAvatar_sleep'] = {\n    init: function() {\n        this.jsonInit(__M5StackAvatar_sleep_json);\n    }\n};\n\nwindow['Blockly'].Python['__M5StackAvatar_sleep'] = function(block) {\n    var Mode = Blockly.Python.valueToCode(block, 'Mode', Blockly.Python.ORDER_NONE);\n    return `global fFaceStatus\nif ${Mode} == 1:\n  fFaceStatus = 2\nelse:\n  fFaceStatus = 0\n` + \"\\n\";\n};\n\n// Block __M5StackAvatar_color\nvar __M5StackAvatar_color_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Avatar_Color\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"R\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"R\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"G\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"G\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"B\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"B\"\n        }\n    ],\n    \"colour\": \"#06e5c0\"\n};\n\nwindow['Blockly'].Blocks['__M5StackAvatar_color'] = {\n    init: function() {\n        this.jsonInit(__M5StackAvatar_color_json);\n    }\n};\n\nwindow['Blockly'].Python['__M5StackAvatar_color'] = function(block) {\n    var R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `global face_color\nface_color = ${R} << 16 | ${G} << 8 | ${B}\nscreen.set_screen_bg_color(face_color)\nscreen.clean_screen()\nlcd.fill(face_color)\n` + \"\\n\";\n};\n\n","code":{"start":["window['Blockly'].Python['__M5StackAvatar_start'] = function(block) {\n        return `# M5StackAvatar BLOCK\n# Based on M5StackAvatarPython : https://github.com/h-akanuma/M5StackAvatarPython\n# v1.0 (220801)\n# v1.1 (241205)\n# v1.2 (241227)\n# Copyright (c) 2022 @akita11, Released under the MIT license\n\nimport random\nface_color = 0x000000\n\nscreen.set_screen_bg_color(face_color)\nscreen.clean_screen()\nlcd.fill(face_color)\n\nM5Avatar_fw, M5Avatar_fh = lcd.fontSize()\nM5Avatar_ww, M5Avatar_wh = lcd.screensize()\nM5Avatar_eye_x = 90\nM5Avatar_eye_y = 93\nM5Avatar_eye_r = 8\nM5Avatar_eye_close_x= 82\nM5Avatar_eye_close_width  = 16\nM5Avatar_eye_close_height = 4\nM5Avatar_blink_term_ms    = 500\nM5Avatar_mouth_x = 115\nM5Avatar_mouth_y = 148\nM5Avatar_mouth_width = 90\nM5Avatar_mouth_height = 4\nM5Avatar_mouth_close= True\nM5Avatar_mouth_close_height = 20\nM5Avatar_exclamation_x = 280\nM5Avatar_exclamation_y = 20\nM5Avatar_exclamation_width  = 10\nM5Avatar_exclamation_height = 30\nM5Avatar_exclamation_space  = 8\ntm_blink = 0\nst_blink = 0\ntm_mouth = 0\nst_mouth = 0\ntm_speak = 0\ntimerAvatar_period = 100\ntm_blink_open = random.randint(2, 6) * 1000\ntm_mouth_period = 500\nfFaceStatus = 0\nM5Avatar_spaces = ' '\nwhile lcd.textWidth(M5Avatar_spaces) < M5Avatar_ww:\n  M5Avatar_spaces += ' '\n\n@timerSch.event('timerAvatar')\ndef ttimerAvatar():\n  global tm_speak\n  _blink()\n  _mouth()\n  tm_speak = tm_speak + timerAvatar_period\n  pass\n\ndef _blink():\n    global tm_blink, st_blink, tm_blink_open\n    tm_blink = tm_blink + timerAvatar_period\n    if st_blink == 0:\n      _eye_close()\n      if tm_blink >= M5Avatar_blink_term_ms:\n        st_blink = 1\n        tm_blink = 0\n    else:\n      _eye_open()\n      if tm_blink >= tm_blink_open:\n        tm_blink_open = random.randint(2, 6) * 1000\n        st_blink = 0\n        tm_blink = 0\n\ndef _eye_close():\n    global face_color\n    lcd.rect(M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_ww - M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_eye_close_x, M5Avatar_eye_y, M5Avatar_eye_close_width, M5Avatar_eye_close_height, lcd.WHITE, lcd.WHITE)\n    lcd.rect(\n        M5Avatar_ww - M5Avatar_eye_close_x - M5Avatar_eye_close_width,\n        M5Avatar_eye_y, M5Avatar_eye_close_width,\n        M5Avatar_eye_close_height,\n        lcd.WHITE,\n        lcd.WHITE\n    )\n\ndef _eye_open():\n    global face_color\n    global fFaceStatus\n    lcd.rect(M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_ww - M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    if fFaceStatus == 0:\n        lcd.circle(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r, lcd.WHITE, lcd.WHITE)\n        lcd.circle(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r, lcd.WHITE, lcd.WHITE)\n    elif fFaceStatus == 1:\n        lcd.arc(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, -90, 90, lcd.WHITE, lcd.WHITE)\n        lcd.arc(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, -90, 90, lcd.WHITE, lcd.WHITE)\n    else:\n        lcd.arc(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, 90, 270, lcd.WHITE, lcd.WHITE)\n        lcd.arc(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, 90, 270, lcd.WHITE, lcd.WHITE)\n   \ndef _mouth():\n  global tm_mouth\n  global face_color\n  tm_mouth = tm_mouth + timerAvatar_period\n  if tm_mouth >= tm_mouth_period:\n    tm_mouth = 0\n    lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, lcd.WHITE, lcd.WHITE)\n\ndef _lipsync():\n  if M5Avatar_mouth_close:\n    _lip_open()\n  else:\n    _lip_close()\n\ndef _lip_close():\n  global M5Avatar_mouth_close\n  global face_color\n  lcd.rect(\n    M5Avatar_mouth_x,\n    M5Avatar_mouth_y - (M5Avatar_mouth_close_height // 2),\n    M5Avatar_mouth_width,\n    M5Avatar_mouth_height + M5Avatar_mouth_close_height, \n    face_color,\n    face_color\n  )\n  lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, lcd.WHITE, lcd.WHITE)\n  M5Avatar_mouth_close = True\n\ndef _lip_open():\n  global M5Avatar_mouth_close\n  global face_color\n  lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, face_color, face_color)\n  lcd.rect(\n    M5Avatar_mouth_x,\n    M5Avatar_mouth_y - (M5Avatar_mouth_close_height // 2),\n    M5Avatar_mouth_width,\n    M5Avatar_mouth_height + M5Avatar_mouth_close_height,\n    lcd.WHITE,\n    lcd.WHITE\n  )\n  M5Avatar_mouth_close = False\n\ndef _speak(_text):\n  text = _text\n  lcd.setColor(lcd.BLACK, lcd.WHITE)\n  lcd.arc((M5Avatar_eye_x + M5Avatar_mouth_x) // 2, (M5Avatar_wh - M5Avatar_fh) - 5, 25, 25, 270, 360, lcd.WHITE, lcd.WHITE)\n  lcd.rect(0, (M5Avatar_wh - M5Avatar_fh) - 5, M5Avatar_ww + 5, M5Avatar_fh + 5, lcd.WHITE, lcd.WHITE)\n  lcd.textClear(0, (M5Avatar_wh - M5Avatar_fh) - 1, M5Avatar_spaces, lcd.WHITE)\n  lcd.print(text, 0, lcd.BOTTOM, lcd.BLACK)\n  _lipsync()\n  tm_speak = 0\n  while tm_speak < 200:\n    tm_speak = tm_speak + timerAvatar_period\n    wait_ms(100)\n    pass\n  tm_speak = 0\n  while lcd.textWidth(text) > 0:\n    text = text[1:]\n    lcd.textClear(0, (M5Avatar_wh - M5Avatar_fh) - 1, M5Avatar_spaces, lcd.WHITE)\n    lcd.print(text, 0, lcd.BOTTOM, lcd.BLACK)\n    _lipsync()\n    while tm_speak < 200:\n      tm_speak = tm_speak + timerAvatar_period\n      wait_ms(100)\n      pass\n    tm_speak = 0\n  lcd.rect(0, (M5Avatar_wh - M5Avatar_fh) - 5, M5Avatar_ww, M5Avatar_fh + 5, face_color, face_color)\n  lcd.arc((M5Avatar_eye_x + M5Avatar_mouth_x) // 2, (M5Avatar_wh - M5Avatar_fh) - 5, 25, 25, 270, 360, face_color, face_color)\n  _lip_close()\n\ndef _exclamation_color(color):\n  lcd.rect(M5Avatar_exclamation_x, M5Avatar_exclamation_y, M5Avatar_exclamation_width, M5Avatar_exclamation_height, color, color)\n  lcd.rect(\n    M5Avatar_exclamation_x, \n    M5Avatar_exclamation_y + M5Avatar_exclamation_height + M5Avatar_exclamation_space,\n    M5Avatar_exclamation_width,\n    M5Avatar_exclamation_width,\n    color,\n    color\n  )\n\ndef _pale_color(color):\n  lcd.rect(200, 0, 5, 40, color, color)\n  lcd.rect(220, 0, 5, 45, color, color)\n  lcd.rect(240, 0, 5, 50, color, color)\n  lcd.rect(260, 0, 5, 55, color, color)\n  lcd.rect(40, 100, 5, 40, color, color)\n  lcd.rect(60, 103, 5, 35, color, color)\n  lcd.rect(80, 106, 5, 30, color, color)\n  lcd.rect(100, 109, 5, 25, color, color)\n\ntimerSch.setTimer('timerAvatar', timerAvatar_period, 0x00)\ntimerSch.run('timerAvatar', timerAvatar_period, 0x00)\ntm_blink_open = random.randint(2, 6) * 1000\n` + \"\\n\";\n};\n\n","# M5StackAvatar BLOCK\n# Based on M5StackAvatarPython : https://github.com/h-akanuma/M5StackAvatarPython\n# v1.0 (220801)\n# v1.1 (241205)\n# v1.2 (241227)\n# Copyright (c) 2022 @akita11, Released under the MIT license\n\nimport random\nface_color = 0x000000\n\nscreen.set_screen_bg_color(face_color)\nscreen.clean_screen()\nlcd.fill(face_color)\n\nM5Avatar_fw, M5Avatar_fh = lcd.fontSize()\nM5Avatar_ww, M5Avatar_wh = lcd.screensize()\nM5Avatar_eye_x = 90\nM5Avatar_eye_y = 93\nM5Avatar_eye_r = 8\nM5Avatar_eye_close_x= 82\nM5Avatar_eye_close_width  = 16\nM5Avatar_eye_close_height = 4\nM5Avatar_blink_term_ms    = 500\nM5Avatar_mouth_x = 115\nM5Avatar_mouth_y = 148\nM5Avatar_mouth_width = 90\nM5Avatar_mouth_height = 4\nM5Avatar_mouth_close= True\nM5Avatar_mouth_close_height = 20\nM5Avatar_exclamation_x = 280\nM5Avatar_exclamation_y = 20\nM5Avatar_exclamation_width  = 10\nM5Avatar_exclamation_height = 30\nM5Avatar_exclamation_space  = 8\ntm_blink = 0\nst_blink = 0\ntm_mouth = 0\nst_mouth = 0\ntm_speak = 0\ntimerAvatar_period = 100\ntm_blink_open = random.randint(2, 6) * 1000\ntm_mouth_period = 500\nfFaceStatus = 0\nM5Avatar_spaces = ' '\nwhile lcd.textWidth(M5Avatar_spaces) < M5Avatar_ww:\n  M5Avatar_spaces += ' '\n\n@timerSch.event('timerAvatar')\ndef ttimerAvatar():\n  global tm_speak\n  _blink()\n  _mouth()\n  tm_speak = tm_speak + timerAvatar_period\n  pass\n\ndef _blink():\n    global tm_blink, st_blink, tm_blink_open\n    tm_blink = tm_blink + timerAvatar_period\n    if st_blink == 0:\n      _eye_close()\n      if tm_blink >= M5Avatar_blink_term_ms:\n        st_blink = 1\n        tm_blink = 0\n    else:\n      _eye_open()\n      if tm_blink >= tm_blink_open:\n        tm_blink_open = random.randint(2, 6) * 1000\n        st_blink = 0\n        tm_blink = 0\n\ndef _eye_close():\n    global face_color\n    lcd.rect(M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_ww - M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_eye_close_x, M5Avatar_eye_y, M5Avatar_eye_close_width, M5Avatar_eye_close_height, lcd.WHITE, lcd.WHITE)\n    lcd.rect(\n        M5Avatar_ww - M5Avatar_eye_close_x - M5Avatar_eye_close_width,\n        M5Avatar_eye_y, M5Avatar_eye_close_width,\n        M5Avatar_eye_close_height,\n        lcd.WHITE,\n        lcd.WHITE\n    )\n\ndef _eye_open():\n    global face_color\n    global fFaceStatus\n    lcd.rect(M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    lcd.rect(M5Avatar_ww - M5Avatar_eye_x - M5Avatar_eye_r - 5, M5Avatar_eye_y - M5Avatar_eye_r - 5, 2*(M5Avatar_eye_r + 5), 2*(M5Avatar_eye_r + 5), face_color, face_color)\n    if fFaceStatus == 0:\n        lcd.circle(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r, lcd.WHITE, lcd.WHITE)\n        lcd.circle(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r, lcd.WHITE, lcd.WHITE)\n    elif fFaceStatus == 1:\n        lcd.arc(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, -90, 90, lcd.WHITE, lcd.WHITE)\n        lcd.arc(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, -90, 90, lcd.WHITE, lcd.WHITE)\n    else:\n        lcd.arc(M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, 90, 270, lcd.WHITE, lcd.WHITE)\n        lcd.arc(M5Avatar_ww - M5Avatar_eye_x, M5Avatar_eye_y, M5Avatar_eye_r + 5, 5, 90, 270, lcd.WHITE, lcd.WHITE)\n   \ndef _mouth():\n  global tm_mouth\n  global face_color\n  tm_mouth = tm_mouth + timerAvatar_period\n  if tm_mouth >= tm_mouth_period:\n    tm_mouth = 0\n    lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, lcd.WHITE, lcd.WHITE)\n\ndef _lipsync():\n  if M5Avatar_mouth_close:\n    _lip_open()\n  else:\n    _lip_close()\n\ndef _lip_close():\n  global M5Avatar_mouth_close\n  global face_color\n  lcd.rect(\n    M5Avatar_mouth_x,\n    M5Avatar_mouth_y - (M5Avatar_mouth_close_height // 2),\n    M5Avatar_mouth_width,\n    M5Avatar_mouth_height + M5Avatar_mouth_close_height, \n    face_color,\n    face_color\n  )\n  lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, lcd.WHITE, lcd.WHITE)\n  M5Avatar_mouth_close = True\n\ndef _lip_open():\n  global M5Avatar_mouth_close\n  global face_color\n  lcd.rect(M5Avatar_mouth_x, M5Avatar_mouth_y, M5Avatar_mouth_width, M5Avatar_mouth_height, face_color, face_color)\n  lcd.rect(\n    M5Avatar_mouth_x,\n    M5Avatar_mouth_y - (M5Avatar_mouth_close_height // 2),\n    M5Avatar_mouth_width,\n    M5Avatar_mouth_height + M5Avatar_mouth_close_height,\n    lcd.WHITE,\n    lcd.WHITE\n  )\n  M5Avatar_mouth_close = False\n\ndef _speak(_text):\n  text = _text\n  lcd.setColor(lcd.BLACK, lcd.WHITE)\n  lcd.arc((M5Avatar_eye_x + M5Avatar_mouth_x) // 2, (M5Avatar_wh - M5Avatar_fh) - 5, 25, 25, 270, 360, lcd.WHITE, lcd.WHITE)\n  lcd.rect(0, (M5Avatar_wh - M5Avatar_fh) - 5, M5Avatar_ww + 5, M5Avatar_fh + 5, lcd.WHITE, lcd.WHITE)\n  lcd.textClear(0, (M5Avatar_wh - M5Avatar_fh) - 1, M5Avatar_spaces, lcd.WHITE)\n  lcd.print(text, 0, lcd.BOTTOM, lcd.BLACK)\n  _lipsync()\n  tm_speak = 0\n  while tm_speak < 200:\n    tm_speak = tm_speak + timerAvatar_period\n    wait_ms(100)\n    pass\n  tm_speak = 0\n  while lcd.textWidth(text) > 0:\n    text = text[1:]\n    lcd.textClear(0, (M5Avatar_wh - M5Avatar_fh) - 1, M5Avatar_spaces, lcd.WHITE)\n    lcd.print(text, 0, lcd.BOTTOM, lcd.BLACK)\n    _lipsync()\n    while tm_speak < 200:\n      tm_speak = tm_speak + timerAvatar_period\n      wait_ms(100)\n      pass\n    tm_speak = 0\n  lcd.rect(0, (M5Avatar_wh - M5Avatar_fh) - 5, M5Avatar_ww, M5Avatar_fh + 5, face_color, face_color)\n  lcd.arc((M5Avatar_eye_x + M5Avatar_mouth_x) // 2, (M5Avatar_wh - M5Avatar_fh) - 5, 25, 25, 270, 360, face_color, face_color)\n  _lip_close()\n\ndef _exclamation_color(color):\n  lcd.rect(M5Avatar_exclamation_x, M5Avatar_exclamation_y, M5Avatar_exclamation_width, M5Avatar_exclamation_height, color, color)\n  lcd.rect(\n    M5Avatar_exclamation_x, \n    M5Avatar_exclamation_y + M5Avatar_exclamation_height + M5Avatar_exclamation_space,\n    M5Avatar_exclamation_width,\n    M5Avatar_exclamation_width,\n    color,\n    color\n  )\n\ndef _pale_color(color):\n  lcd.rect(200, 0, 5, 40, color, color)\n  lcd.rect(220, 0, 5, 45, color, color)\n  lcd.rect(240, 0, 5, 50, color, color)\n  lcd.rect(260, 0, 5, 55, color, color)\n  lcd.rect(40, 100, 5, 40, color, color)\n  lcd.rect(60, 103, 5, 35, color, color)\n  lcd.rect(80, 106, 5, 30, color, color)\n  lcd.rect(100, 109, 5, 25, color, color)\n\ntimerSch.setTimer('timerAvatar', timerAvatar_period, 0x00)\ntimerSch.run('timerAvatar', timerAvatar_period, 0x00)\ntm_blink_open = random.randint(2, 6) * 1000\n"],"speak":["window['Blockly'].Python['__M5StackAvatar_speak'] = function(block) {\n    var Text = Blockly.Python.valueToCode(block, 'Text', Blockly.Python.ORDER_NONE);\n    return `_speak(${Text})\n` + \"\\n\";\n};\n\n","_speak(${Text})\n"],"exclamation":["window['Blockly'].Python['__M5StackAvatar_exclamation'] = function(block) {\n    var Mode = Blockly.Python.valueToCode(block, 'Mode', Blockly.Python.ORDER_NONE);\n    return `global face_color\nif ${Mode} == 1:\n  _exclamation_color(lcd.RED)\nelse:\n  _exclamation_color(face_color)\n` + \"\\n\";\n};\n\n","global face_color\nif ${Mode} == 1:\n  _exclamation_color(lcd.RED)\nelse:\n  _exclamation_color(face_color)\n"],"pale":["window['Blockly'].Python['__M5StackAvatar_pale'] = function(block) {\n    var Mode = Blockly.Python.valueToCode(block, 'Mode', Blockly.Python.ORDER_NONE);\n    return `global face_color\nif ${Mode} == 1:\n  _pale_color(lcd.BLUE)\nelse:\n  _pale_color(face_color)\n` + \"\\n\";\n};\n\n","global face_color\nif ${Mode} == 1:\n  _pale_color(lcd.BLUE)\nelse:\n  _pale_color(face_color)\n"],"smile":["window['Blockly'].Python['__M5StackAvatar_smile'] = function(block) {\n    var Mode = Blockly.Python.valueToCode(block, 'Mode', Blockly.Python.ORDER_NONE);\n    return `global fFaceStatus\nif ${Mode} == 1:\n  fFaceStatus = 1\nelse:\n  fFaceStatus = 0\n` + \"\\n\";\n};\n\n","global fFaceStatus\nif ${Mode} == 1:\n  fFaceStatus = 1\nelse:\n  fFaceStatus = 0\n"],"sleep":["window['Blockly'].Python['__M5StackAvatar_sleep'] = function(block) {\n    var Mode = Blockly.Python.valueToCode(block, 'Mode', Blockly.Python.ORDER_NONE);\n    return `global fFaceStatus\nif ${Mode} == 1:\n  fFaceStatus = 2\nelse:\n  fFaceStatus = 0\n` + \"\\n\";\n};\n\n","global fFaceStatus\nif ${Mode} == 1:\n  fFaceStatus = 2\nelse:\n  fFaceStatus = 0\n"],"color":["window['Blockly'].Python['__M5StackAvatar_color'] = function(block) {\n    var R = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_NONE);\nvar G = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_NONE);\nvar B = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_NONE);\n    return `global face_color\nface_color = ${R} << 16 | ${G} << 8 | ${B}\nscreen.set_screen_bg_color(face_color)\nscreen.clean_screen()\nlcd.fill(face_color)\n` + \"\\n\";\n};\n\n","global face_color\nface_color = ${R} << 16 | ${G} << 8 | ${B}\nscreen.set_screen_bg_color(face_color)\nscreen.clean_screen()\nlcd.fill(face_color)\n"]}}